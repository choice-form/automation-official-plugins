name: Plugin Auto Publish

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  detect-changes:
    name: Detect Plugin Changes
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.changes.outputs.plugins }}
      has_plugins: ${{ steps.changes.outputs.has_plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changed Plugins
        id: changes
        run: |
          # Ëé∑ÂèñÊúÄËøëÁöÑÊèê‰∫§‰∏≠ÂèòÊõ¥ÁöÑÊèí‰ª∂
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # ÊâãÂä®Ëß¶ÂèëÊó∂ÔºåÂèëÂ∏ÉÊâÄÊúâÊèí‰ª∂
            PLUGINS=$(find extensions models tools -maxdepth 1 -mindepth 1 -type d | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            # Ëá™Âä®Ëß¶ÂèëÊó∂ÔºåÂè™ÂèëÂ∏ÉÊúâÂèòÊõ¥ÁöÑÊèí‰ª∂
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            PLUGINS=$(echo "$CHANGED_FILES" | grep -E '^(extensions|models|tools)/[^/]+/' | cut -d'/' -f1-2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          
          echo "Plugins to publish: $PLUGINS"
          echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT
          
          if [[ "$PLUGINS" != "[]" ]]; then
            echo "has_plugins=true" >> $GITHUB_OUTPUT
          else
            echo "has_plugins=false" >> $GITHUB_OUTPUT
          fi

  build-plugins:
    name: Build Plugin Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_plugins == 'true'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install Dependencies
        run: |
          cd ${{ matrix.plugin }}
          npm install

      - name: Install Plugin SDK
        run: |
          cd ${{ matrix.plugin }}
          npm install @choiceform/automation-sdk@latest

      - name: Build Plugin
        run: |
          cd ${{ matrix.plugin }}
          npm run build

      - name: Package Plugin
        run: |
          cd ${{ matrix.plugin }}
          npx @choiceform/automation-sdk build
          
          # ËØªÂèñÊèí‰ª∂‰ø°ÊÅØ
          PLUGIN_NAME=$(node -p "require('./package.json').name")
          PLUGIN_VERSION=$(node -p "require('./package.json').version")
          
          # ÂàõÂª∫ÂèëÂ∏ÉÂåÖ
          mkdir -p ../dist
          cp *.choiceformpkg ../dist/ || echo "No .choiceformpkg files found"

      - name: Upload Plugin Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-${{ matrix.plugin }}
          path: dist/
          retention-days: 30

  create-release:
    name: Create Plugin Release
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins]
    if: needs.detect-changes.outputs.has_plugins == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Generate Release Notes
        id: release-notes
        run: |
          PLUGINS='${{ needs.detect-changes.outputs.plugins }}'
          
          # ÁîüÊàêÂèëÂ∏ÉËØ¥Êòé
          echo "## üöÄ Official Plugins Release $(date +'%Y-%m-%d')" > release-notes.md
          echo "" >> release-notes.md
          echo "### üì¶ Updated Plugins" >> release-notes.md
          echo "" >> release-notes.md
          
          for plugin in $(echo $PLUGINS | jq -r '.[]'); do
            if [[ -d "$plugin" ]]; then
              PLUGIN_NAME=$(node -p "require('./$plugin/package.json').name" 2>/dev/null || echo "$plugin")
              PLUGIN_VERSION=$(node -p "require('./$plugin/package.json').version" 2>/dev/null || echo "unknown")
              PLUGIN_DESC=$(node -p "require('./$plugin/package.json').description" 2>/dev/null || echo "")
              
              echo "#### $PLUGIN_NAME v$PLUGIN_VERSION" >> release-notes.md
              echo "$PLUGIN_DESC" >> release-notes.md
              echo "" >> release-notes.md
            fi
          done
          
          echo "### üì• Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "ÂÆòÊñπÊèí‰ª∂ÂèØÈÄöËøá‰ª•‰∏ãÊñπÂºèÂÆâË£ÖÔºö" >> release-notes.md
          echo "" >> release-notes.md
          echo "1. **Ëá™Âä®ÂÆâË£Ö**ÔºöÂú® ChoiceForm Automation Êèí‰ª∂Â∏ÇÂú∫‰∏≠ÊêúÁ¥¢Âπ∂ÂÆâË£Ö" >> release-notes.md
          echo "2. **ÊâãÂä®ÂÆâË£Ö**Ôºö‰∏ãËΩΩ .choiceformpkg Êñá‰ª∂Âπ∂ÂØºÂÖ•" >> release-notes.md
          echo "3. **SDK ÂÆâË£Ö**Ôºö‰ΩøÁî® \`@choiceform/automation-sdk\` ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑" >> release-notes.md
          echo "" >> release-notes.md
          
          # ËÆæÁΩÆËæìÂá∫
          echo "RELEASE_TAG=v$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-notes.outputs.RELEASE_TAG }}
          name: Official Plugins Release ${{ steps.release-notes.outputs.RELEASE_TAG }}
          body_path: release-notes.md
          files: release-artifacts/**/*.choiceformpkg
          draft: false
          prerelease: false

  update-registry:
    name: Update Plugin Registry
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins, create-release]
    if: needs.detect-changes.outputs.has_plugins == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

             - name: Generate Plugin Registry
         run: |
           mkdir -p registry
           
           # ÁîüÊàêÊèí‰ª∂Ê≥®ÂÜåË°®
           echo "Generating official plugin registry..."
           
           # ÂàõÂª∫Ê≥®ÂÜåË°®ÁîüÊàêËÑöÊú¨
           cat > generate-registry.js << 'EOF'
           const fs = require('fs');
           const path = require('path');
           
           const registry = {
             version: "1.0.0",
             generated: new Date().toISOString(),
             repository: "automation-official-plugins",
             plugins: {
               official: [],
               community: [] // ‰∏∫‰∫ÜÂÖºÂÆπÊÄßÔºå‰øùÊåÅÁ©∫Êï∞ÁªÑ
             }
           };
           
           // Êâ´ÊèèÊâÄÊúâÊèí‰ª∂ÁõÆÂΩï
           const categories = ['extensions', 'models', 'tools'];
           
           for (const category of categories) {
             if (fs.existsSync(category)) {
               const pluginDirs = fs.readdirSync(category, { withFileTypes: true })
                 .filter(dirent => dirent.isDirectory())
                 .map(dirent => dirent.name);
               
               for (const pluginDir of pluginDirs) {
                 const pluginPath = path.join(category, pluginDir);
                 const packageJsonPath = path.join(pluginPath, 'package.json');
                 const manifestPath = path.join(pluginPath, 'plugin.manifest.json');
                 
                 if (fs.existsSync(packageJsonPath) && fs.existsSync(manifestPath)) {
                   try {
                     const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
                     const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
                     
                     const pluginId = `${category}/${pluginDir}`;
                     const version = packageJson.version;
                     const downloadUrl = `https://github.com/choiceform/automation-official-plugins/releases/download/${pluginId}-v${version}/${pluginId.replace('/', '-')}-${version}.choiceformpkg`;
                     
                     const pluginInfo = {
                       id: pluginId,
                       name: manifest.displayName || packageJson.name,
                       description: packageJson.description || manifest.description || "",
                       version: version,
                       category: manifest.category || category.slice(0, -1), // tools -> tool
                       author: {
                         name: typeof packageJson.author === 'string' ? packageJson.author : packageJson.author?.name || "ChoiceForm Team",
                         email: typeof packageJson.author === 'object' ? packageJson.author.email : "team@choiceform.com"
                       },
                       repository: `https://github.com/choiceform/automation-official-plugins/tree/main/${pluginId}`,
                       downloadUrl: downloadUrl,
                       manifest: {
                         displayName: manifest.displayName,
                         sdkVersion: manifest.sdkVersion,
                         inputs: manifest.inputs || [],
                         outputs: manifest.outputs || []
                       },
                       compatibility: {
                         automationVersion: manifest.engines?.automation || ">=2.0.0",
                         sdkVersion: manifest.sdkVersion || "^1.0.0"
                       },
                       publishedAt: new Date().toISOString(),
                       updatedAt: new Date().toISOString()
                     };
                     
                     registry.plugins.official.push(pluginInfo);
                     console.log(`‚úÖ Added official plugin: ${pluginId}`);
                   } catch (error) {
                     console.error(`‚ùå Error processing plugin ${pluginPath}:`, error.message);
                   }
                 }
               }
             }
           }
           
           // ÊåâÂêçÁß∞ÊéíÂ∫è
           registry.plugins.official.sort((a, b) => a.name.localeCompare(b.name));
           
           // ÂÜôÂÖ•Ê≥®ÂÜåË°®Êñá‰ª∂
           fs.writeFileSync('registry/registry.json', JSON.stringify(registry, null, 2));
           console.log(`üì¶ Generated official registry with ${registry.plugins.official.length} plugins`);
           EOF
           
           # ËøêË°åÊ≥®ÂÜåË°®ÁîüÊàêËÑöÊú¨
           node generate-registry.js
          
          # Êâ´ÊèèÊØè‰∏™Êèí‰ª∂Á±ªÂûã
          for category in extensions models tools; do
            if [[ -d "$category" ]]; then
              for plugin_dir in $category/*/; do
                if [[ -f "$plugin_dir/package.json" ]]; then
                  echo "Processing $plugin_dir..."
                  
                  # ËØªÂèñÊèí‰ª∂‰ø°ÊÅØ
                  PLUGIN_NAME=$(node -p "require('./$plugin_dir/package.json').name" 2>/dev/null || echo "")
                  PLUGIN_VERSION=$(node -p "require('./$plugin_dir/package.json').version" 2>/dev/null || echo "1.0.0")
                  PLUGIN_DESC=$(node -p "require('./$plugin_dir/package.json').description" 2>/dev/null || echo "")
                  PLUGIN_AUTHOR=$(node -p "require('./$plugin_dir/package.json').author" 2>/dev/null || echo "ChoiceForm")
                  
                  if [[ ! -z "$PLUGIN_NAME" ]]; then
                    # Ê∑ªÂä†Âà∞Ê≥®ÂÜåË°®
                    PLUGIN_ENTRY=$(cat << EOF
          {
            "name": "$PLUGIN_NAME",
            "version": "$PLUGIN_VERSION", 
            "description": "$PLUGIN_DESC",
            "author": "$PLUGIN_AUTHOR",
            "category": "$category",
            "download_url": "https://github.com/choiceform/automation-official-plugins/releases/latest/download/${PLUGIN_NAME}-${PLUGIN_VERSION}.choiceformpkg",
            "repository_url": "https://github.com/choiceform/automation-official-plugins/tree/main/$plugin_dir",
            "updated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          }
          EOF
          )
                    echo "Added $PLUGIN_NAME to registry"
                  fi
                fi
              done
            fi
          done
          
          # ÁîüÊàêÁÆÄÂçïÁöÑ HTML È°µÈù¢
          cat > registry/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>ChoiceForm Official Plugins Registry</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
              .plugin { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
              .category { margin: 20px 0; }
              .category h2 { color: #333; border-bottom: 2px solid #007cba; padding-bottom: 5px; }
            </style>
          </head>
          <body>
            <h1>üîå ChoiceForm Official Plugins</h1>
            <p>ÂÆòÊñπÁª¥Êä§ÁöÑÈ´òË¥®ÈáèÊèí‰ª∂ÈõÜÂêà</p>
            
            <div class="category">
              <h2>üîß Extensions (Êâ©Â±ïÊèí‰ª∂)</h2>
              <p>ËΩªÈáèÁ∫ß HTTP Á´ØÁÇπÂäüËÉΩ</p>
            </div>
            
            <div class="category">
              <h2>ü§ñ Models (Ê®°ÂûãÊèí‰ª∂)</h2>
              <p>AI Ê®°ÂûãÈõÜÊàê</p>
            </div>
            
            <div class="category">  
              <h2>üõ†Ô∏è Tools (Â∑•ÂÖ∑Êèí‰ª∂)</h2>
              <p>Á¨¨‰∏âÊñπÊúçÂä°ÈõÜÊàê</p>
            </div>
            
            <hr>
            <p><small>Generated: $(date)</small></p>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: registry/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3 