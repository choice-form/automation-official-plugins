name: Plugin Auto Publish

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  detect-changes:
    name: Detect Plugin Changes
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.changes.outputs.plugins }}
      has_plugins: ${{ steps.changes.outputs.has_plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changed Plugins
        id: changes
        run: |
          # Ëé∑ÂèñÊúÄËøëÁöÑÊèê‰∫§‰∏≠ÂèòÊõ¥ÁöÑÊèí‰ª∂
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # ÊâãÂä®Ëß¶ÂèëÊó∂ÔºåÂèëÂ∏ÉÊâÄÊúâÊèí‰ª∂
            PLUGINS=$(find extensions models tools -maxdepth 1 -mindepth 1 -type d | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            # Ëá™Âä®Ëß¶ÂèëÊó∂ÔºåÂè™ÂèëÂ∏ÉÊúâÂèòÊõ¥ÁöÑÊèí‰ª∂
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            PLUGINS=$(echo "$CHANGED_FILES" | grep -E '^(extensions|models|tools)/[^/]+/' | cut -d'/' -f1-2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "Plugins to publish: $PLUGINS"
          echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT

          if [[ "$PLUGINS" != "[]" ]]; then
            echo "has_plugins=true" >> $GITHUB_OUTPUT
          else
            echo "has_plugins=false" >> $GITHUB_OUTPUT
          fi

  build-plugins:
    name: Build Plugin Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_plugins == 'true'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install Dependencies
        run: |
          cd ${{ matrix.plugin }}
          npm install

      - name: Install Plugin SDK
        run: |
          cd ${{ matrix.plugin }}
          npm install @choiceform/automation-sdk@^1.3.0

      - name: Build Plugin
        run: |
          cd ${{ matrix.plugin }}
          npm run build

      - name: Package Plugin
        run: |
          cd ${{ matrix.plugin }}

          echo "üî® Building plugin package with SDK v1.3.0+..."
          npx @choiceform/automation-sdk build

          # È™åËØÅÂåÖÊñá‰ª∂ÂàõÂª∫ÊàêÂäü
          if ls *.choiceformpkg 1> /dev/null 2>&1; then
            echo "‚úÖ Package created successfully"
            for pkg in *.choiceformpkg; do
              echo "üì¶ Package: $pkg ($(ls -lh "$pkg" | awk '{print $5}'))"
            done
          else
            echo "‚ùå No .choiceformpkg files found"
            exit 1
          fi

      - name: Check Created Files
        run: |
          echo "Files in plugin directory:"
          ls -la ${{ matrix.plugin }}/*.choiceformpkg || echo "No .choiceformpkg files in ${{ matrix.plugin }}"

      - name: Generate Artifact Name
        id: artifact-name
        run: |
          SAFE_NAME=$(echo "${{ matrix.plugin }}" | sed 's/\//-/g')
          echo "name=plugin-${SAFE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Plugin Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: "${{ matrix.plugin }}/*.choiceformpkg"
          retention-days: 30

  create-release:
    name: Create Plugin Release
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins]
    if: needs.detect-changes.outputs.has_plugins == 'true'
    outputs:
      release_tag: ${{ steps.release-notes.outputs.RELEASE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Generate Release Notes
        id: release-notes
        run: |
          PLUGINS='${{ needs.detect-changes.outputs.plugins }}'

          # ÁîüÊàêÂèëÂ∏ÉËØ¥Êòé
          echo "## üöÄ Official Plugins Release $(date +'%Y-%m-%d')" > release-notes.md
          echo "" >> release-notes.md
          echo "### üì¶ Updated Plugins" >> release-notes.md
          echo "" >> release-notes.md

          for plugin in $(echo $PLUGINS | jq -r '.[]'); do
            if [[ -d "$plugin" ]]; then
              PLUGIN_NAME=$(node -p "require('./$plugin/package.json').name" 2>/dev/null || echo "$plugin")
              PLUGIN_VERSION=$(node -p "require('./$plugin/package.json').version" 2>/dev/null || echo "unknown")
              PLUGIN_DESC=$(node -p "require('./$plugin/package.json').description" 2>/dev/null || echo "")
              
              echo "#### $PLUGIN_NAME v$PLUGIN_VERSION" >> release-notes.md
              echo "$PLUGIN_DESC" >> release-notes.md
              echo "" >> release-notes.md
            fi
          done

          echo "### üì• Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "ÂÆòÊñπÊèí‰ª∂ÂèØÈÄöËøá‰ª•‰∏ãÊñπÂºèÂÆâË£ÖÔºö" >> release-notes.md
          echo "" >> release-notes.md
          echo "1. **Ëá™Âä®ÂÆâË£Ö**ÔºöÂú® ChoiceForm Automation Êèí‰ª∂Â∏ÇÂú∫‰∏≠ÊêúÁ¥¢Âπ∂ÂÆâË£Ö" >> release-notes.md
          echo "2. **ÊâãÂä®ÂÆâË£Ö**Ôºö‰∏ãËΩΩ .choiceformpkg Êñá‰ª∂Âπ∂ÂØºÂÖ•" >> release-notes.md
          echo "3. **SDK ÂÆâË£Ö**Ôºö‰ΩøÁî® \`@choiceform/automation-sdk\` ÂëΩ‰ª§Ë°åÂ∑•ÂÖ∑" >> release-notes.md
          echo "" >> release-notes.md

          # ËÆæÁΩÆËæìÂá∫
          echo "RELEASE_TAG=v$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-notes.outputs.RELEASE_TAG }}
          name: Official Plugins Release ${{ steps.release-notes.outputs.RELEASE_TAG }}
          body_path: release-notes.md
          files: release-artifacts/**/*.choiceformpkg
          draft: false
          prerelease: false

  update-registry:
    name: Update Plugin Registry
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins, create-release]
    if: needs.detect-changes.outputs.has_plugins == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate Plugin Registry
        run: |
          mkdir -p registry
          mkdir -p registry/icons

          # ÁîüÊàêÊèí‰ª∂Ê≥®ÂÜåË°®
          echo "Generating plugin registry..."

          # ÁîüÊàêÂü∫Á°Ä JSON ÁªìÊûÑ
          CURRENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          cat > registry/registry.json << EOF
          {
            "version": "1.0.0",
            "generated": "$CURRENT_DATE",
            "repository": "automation-official-plugins",
            "plugins": {
              "extensions": [],
              "models": [],
              "tools": []
            }
          }
          EOF

          # ÂàõÂª∫‰∏¥Êó∂Êñá‰ª∂Êù•ÊûÑÂª∫ÂÆåÊï¥ÁöÑ JSON
          echo '{"version": "1.0.0","generated": "'$CURRENT_DATE'","repository": "automation-official-plugins","plugins": {"extensions": [],"models": [],"tools": []}}' > temp_registry.json

          # Êâ´ÊèèÊØè‰∏™Êèí‰ª∂Á±ªÂûãÂπ∂Âä®ÊÄÅÊûÑÂª∫ JSON
          for category in extensions models tools; do
            if [[ -d "$category" ]]; then
              for plugin_dir in $category/*/; do
                if [[ -f "$plugin_dir/package.json" ]]; then
                  echo "Processing $plugin_dir..."
                  
                  # ËØªÂèñÊèí‰ª∂‰ø°ÊÅØ
                  PLUGIN_NAME=$(node -p "require('./$plugin_dir/package.json').name" 2>/dev/null || echo "")
                  PLUGIN_VERSION=$(node -p "require('./$plugin_dir/package.json').version" 2>/dev/null || echo "1.0.0")
                  PLUGIN_DESC=$(node -p "require('./$plugin_dir/package.json').description" 2>/dev/null || echo "")
                  PLUGIN_AUTHOR=$(node -p "require('./$plugin_dir/package.json').author" 2>/dev/null || echo "ChoiceForm")
                  
                  if [[ ! -z "$PLUGIN_NAME" ]]; then
                    # ÂàõÂª∫ÂÆâÂÖ®ÁöÑÊñá‰ª∂ÂêçÔºàÊõøÊç¢ÁâπÊÆäÂ≠óÁ¨¶Ôºâ
                    SAFE_NAME=$(echo "$PLUGIN_NAME" | sed 's/[@\/]/-/g' | sed 's/^-//' | sed 's/-$//')
                    PACKAGE_NAME="${SAFE_NAME}-${PLUGIN_VERSION}.choiceformpkg"
                    
                    # Â§ÑÁêÜÊèí‰ª∂ÂõæÊ†á
                    ICON_URL=""
                    if [[ -f "$plugin_dir/icon.svg" ]]; then
                      echo "üì∏ Found SVG icon for $PLUGIN_NAME"
                      cp "$plugin_dir/icon.svg" "registry/icons/${SAFE_NAME}.svg"
                      ICON_URL="https://choice-form.github.io/automation-official-plugins/icons/${SAFE_NAME}.svg"
                    elif [[ -f "$plugin_dir/icon.png" ]]; then
                      echo "üì∏ Found PNG icon for $PLUGIN_NAME"
                      cp "$plugin_dir/icon.png" "registry/icons/${SAFE_NAME}.png"
                      ICON_URL="https://choice-form.github.io/automation-official-plugins/icons/${SAFE_NAME}.png"
                    elif [[ -f "$plugin_dir/icon.jpg" ]] || [[ -f "$plugin_dir/icon.jpeg" ]]; then
                      echo "üì∏ Found JPEG icon for $PLUGIN_NAME"
                      if [[ -f "$plugin_dir/icon.jpg" ]]; then
                        cp "$plugin_dir/icon.jpg" "registry/icons/${SAFE_NAME}.jpg"
                        ICON_URL="https://choice-form.github.io/automation-official-plugins/icons/${SAFE_NAME}.jpg"
                      else
                        cp "$plugin_dir/icon.jpeg" "registry/icons/${SAFE_NAME}.jpeg"
                        ICON_URL="https://choice-form.github.io/automation-official-plugins/icons/${SAFE_NAME}.jpeg"
                      fi
                    else
                      echo "‚ö†Ô∏è  No icon found for $PLUGIN_NAME (looking for icon.svg, icon.png, icon.jpg)"
                    fi
                    
                    # ‰ΩøÁî® jq Ê∑ªÂä†Êèí‰ª∂Âà∞ÂØπÂ∫îÂàÜÁ±ª
                    PLUGIN_ENTRY=$(cat << EOF
          {
            "name": "$PLUGIN_NAME",
            "version": "$PLUGIN_VERSION", 
            "description": "$PLUGIN_DESC",
            "author": "$PLUGIN_AUTHOR",
            "category": "$category",
            "download_url": "https://github.com/choice-form/automation-official-plugins/releases/download/${{ needs.create-release.outputs.release_tag }}/${PACKAGE_NAME}",
            "repository_url": "https://github.com/choice-form/automation-official-plugins/tree/main/$plugin_dir",
            "icon_url": "$ICON_URL",
            "updated_at": "$CURRENT_DATE"
          }
          EOF
          )
                    # ‰ΩøÁî® jq Â∞ÜÊèí‰ª∂Ê∑ªÂä†Âà∞ÂØπÂ∫îÂàÜÁ±ª
                    echo "$PLUGIN_ENTRY" | jq -c '.' > temp_plugin.json
                    cat temp_registry.json | jq ".plugins.$category += [$(cat temp_plugin.json)]" > temp_registry_new.json
                    mv temp_registry_new.json temp_registry.json
                    echo "Added $PLUGIN_NAME to $category registry"
                  fi
                fi
              done
            fi
          done

          # ÁæéÂåñ JSON Âπ∂‰øùÂ≠ò
          cat temp_registry.json | jq '.' > registry/registry.json
          rm -f temp_registry.json temp_plugin.json

          # ÁîüÊàê HTML È°µÈù¢
          cat > registry/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>ChoiceForm Official Plugins Registry</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
              body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                max-width: 1200px; margin: 0 auto; padding: 20px; 
                background: #f8fafc; color: #334155; 
              }
              .header { text-align: center; margin-bottom: 40px; padding: 40px 0; background: white; border-radius: 12px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
              .plugin { 
                background: white; border: 1px solid #e2e8f0; margin: 15px 0; padding: 20px; 
                border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); 
                display: flex; align-items: center; gap: 15px;
              }
              .plugin-icon { 
                width: 48px; height: 48px; flex-shrink: 0; 
                background: #f1f5f9; border-radius: 8px; display: flex; align-items: center; justify-content: center;
                font-size: 24px;
              }
              .plugin-icon img { width: 32px; height: 32px; object-fit: contain; }
              .plugin-info { flex: 1; }
              .plugin-name { font-size: 18px; font-weight: 600; margin-bottom: 5px; color: #1e293b; }
              .plugin-desc { color: #64748b; margin-bottom: 8px; }
              .plugin-meta { font-size: 14px; color: #94a3b8; }
              .category { margin: 30px 0; }
              .category h2 { 
                color: #1e293b; border-bottom: 3px solid #3b82f6; padding-bottom: 10px; 
                font-size: 24px; margin-bottom: 20px;
              }
              .category-desc { color: #64748b; margin-bottom: 20px; font-size: 16px; }
              .stats { text-align: center; margin: 30px 0; font-size: 14px; color: #64748b; }
              .download-btn {
                background: #3b82f6; color: white; padding: 8px 16px; text-decoration: none;
                border-radius: 6px; font-size: 14px; font-weight: 500; display: inline-block;
              }
              .download-btn:hover { background: #2563eb; }
            </style>
          </head>
          <body>
            <div class="header">
            <h1>üîå ChoiceForm Official Plugins</h1>
              <p>Enterprise-grade plugins for automation workflows</p>
            </div>
            
            <div id="plugins-container">
              <!-- Êèí‰ª∂Â∞ÜÈÄöËøá JavaScript Âä®ÊÄÅÂä†ËΩΩ -->
            </div>
            
            <div class="stats">
              <p><small>Registry generated: $(date) | <a href="registry.json">JSON API</a></small></p>
            </div>
            
            <script>
              async function loadPlugins() {
                try {
                  const response = await fetch('registry.json');
                  const data = await response.json();
                  const container = document.getElementById('plugins-container');
                  
                  const categories = {
                    tools: { title: 'üõ†Ô∏è Tools', desc: 'Third-party service integrations' },
                    extensions: { title: 'üîß Extensions', desc: 'Lightweight HTTP endpoint functionality' },
                    models: { title: 'ü§ñ Models', desc: 'AI model integrations' }
                  };
                  
                  for (const [categoryKey, categoryInfo] of Object.entries(categories)) {
                    const plugins = data.plugins[categoryKey] || [];
                    if (plugins.length === 0) continue;
                    
                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'category';
                    categoryDiv.innerHTML = \`
                      <h2>\${categoryInfo.title} (\${plugins.length})</h2>
                      <p class="category-desc">\${categoryInfo.desc}</p>
                    \`;
                    
                    plugins.forEach(plugin => {
                      const pluginDiv = document.createElement('div');
                      pluginDiv.className = 'plugin';
                      
                      const iconHtml = plugin.icon_url 
                        ? \`<img src="\${plugin.icon_url}" alt="\${plugin.name} icon" onerror="this.style.display='none'">\`
                        : 'üîå';
                      
                      pluginDiv.innerHTML = \`
                        <div class="plugin-icon">\${iconHtml}</div>
                        <div class="plugin-info">
                          <div class="plugin-name">\${plugin.name}</div>
                          <div class="plugin-desc">\${plugin.description}</div>
                          <div class="plugin-meta">
                            v\${plugin.version} ‚Ä¢ by \${plugin.author} ‚Ä¢ Updated \${new Date(plugin.updated_at).toLocaleDateString()}
                          </div>
                        </div>
                        <a href="\${plugin.download_url}" class="download-btn">Download</a>
                      \`;
                      
                      categoryDiv.appendChild(pluginDiv);
                    });
                    
                    container.appendChild(categoryDiv);
                  }
                } catch (error) {
                  console.error('Failed to load plugins:', error);
                  document.getElementById('plugins-container').innerHTML = '<p>Failed to load plugins data.</p>';
                }
              }
              
              // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÊâßË°å
              if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', loadPlugins);
              } else {
                loadPlugins();
              }
            </script>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: registry/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Registry Info
        run: |
          echo "‚úÖ Plugin Registry Generated Successfully!"
          echo "üìÅ Registry files created in registry/ directory"
          if [ -f registry/registry.json ]; then
            echo "üìã registry.json size: $(stat -c%s registry/registry.json 2>/dev/null || stat -f%z registry/registry.json) bytes"
          fi
          if [ -f registry/index.html ]; then
            echo "üåê index.html size: $(stat -c%s registry/index.html 2>/dev/null || stat -f%z registry/index.html) bytes"
          fi
          echo "üîó If GitHub Pages deployment failed, you can manually upload these files"
