name: Plugin Auto Publish

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: read

jobs:
  detect-changes:
    name: Detect Plugin Changes
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.changes.outputs.plugins }}
      has_plugins: ${{ steps.changes.outputs.has_plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changed Plugins
        id: changes
        run: |
          # 获取最近的提交中变更的插件
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # 手动触发时，发布所有插件
            PLUGINS=$(find extensions models tools -maxdepth 1 -mindepth 1 -type d | jq -R -s -c 'split("\n") | map(select(length > 0))')
          else
            # 自动触发时，只发布有变更的插件
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
            PLUGINS=$(echo "$CHANGED_FILES" | grep -E '^(extensions|models|tools)/[^/]+/' | cut -d'/' -f1-2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi

          echo "Plugins to publish: $PLUGINS"
          echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT

          if [[ "$PLUGINS" != "[]" ]]; then
            echo "has_plugins=true" >> $GITHUB_OUTPUT
          else
            echo "has_plugins=false" >> $GITHUB_OUTPUT
          fi

  build-plugins:
    name: Build Plugin Packages
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_plugins == 'true'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install Dependencies
        run: |
          cd ${{ matrix.plugin }}
          npm install

      - name: Install Plugin SDK
        run: |
          cd ${{ matrix.plugin }}
          npm install @choiceform/automation-sdk@latest

      - name: Build Plugin
        run: |
          cd ${{ matrix.plugin }}
          npm run build

      - name: Package Plugin
        run: |
          cd ${{ matrix.plugin }}
          npx @choiceform/automation-sdk build

          # 读取插件信息
          PLUGIN_NAME=$(node -p "require('./package.json').name")
          PLUGIN_VERSION=$(node -p "require('./package.json').version")

          # 查找 .choiceformpkg 文件
          if ls *.choiceformpkg 1> /dev/null 2>&1; then
            echo "Found .choiceformpkg files"
            echo "SDK已经生成了包文件"
          else
            echo "No .choiceformpkg files found, creating package manually..."
            
            # 创建临时包目录
            mkdir -p temp_package
            
            # 复制编译后的文件和配置
            if [ -d "dist" ]; then
              echo "Copying dist files..."
              cp -r dist/* temp_package/
            else
              echo "No dist directory found"
            fi
            
            # 复制必要文件
            [ -f "package.json" ] && cp package.json temp_package/ && echo "Copied package.json"
            [ -f "plugin.manifest.json" ] && cp plugin.manifest.json temp_package/ && echo "Copied manifest"
            [ -f "plugin.registry.json" ] && cp plugin.registry.json temp_package/ && echo "Copied registry"
            [ -f "README.md" ] && cp README.md temp_package/ && echo "Copied README"
            [ -f "icon.svg" ] && cp icon.svg temp_package/ && echo "Copied icon"
            
            # 如果没有编译后的文件，复制源文件
            if [ ! -d "dist" ] && [ -d "src" ]; then
              echo "No dist found, copying src files..."
              cp -r src temp_package/
            fi
            
            # 创建包文件（使用安全的文件名）
            SAFE_NAME=$(echo "$PLUGIN_NAME" | sed 's/[@\/]/-/g' | sed 's/^-//' | sed 's/-$//')
            PACKAGE_NAME="${SAFE_NAME}-${PLUGIN_VERSION}.choiceformpkg"
            
            # 检查临时目录内容
            echo "Contents of temp_package:"
            ls -la temp_package/
            
            cd temp_package
            tar -czf "../${PACKAGE_NAME}" .
            cd ..
            
            # 验证包文件创建成功
            if [ -f "${PACKAGE_NAME}" ]; then
              echo "✅ Package created successfully: ${PACKAGE_NAME}"
              echo "Package size: $(ls -lh ${PACKAGE_NAME} | awk '{print $5}')"
            else
              echo "❌ Failed to create package: ${PACKAGE_NAME}"
              exit 1
            fi
            
            # 清理临时文件
            rm -rf temp_package
          fi

      - name: Check Created Files
        run: |
          echo "Files in plugin directory:"
          ls -la ${{ matrix.plugin }}/*.choiceformpkg || echo "No .choiceformpkg files in ${{ matrix.plugin }}"

      - name: Generate Artifact Name
        id: artifact-name
        run: |
          SAFE_NAME=$(echo "${{ matrix.plugin }}" | sed 's/\//-/g')
          echo "name=plugin-${SAFE_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Plugin Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact-name.outputs.name }}
          path: "${{ matrix.plugin }}/*.choiceformpkg"
          retention-days: 30

  create-release:
    name: Create Plugin Release
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins]
    if: needs.detect-changes.outputs.has_plugins == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Generate Release Notes
        id: release-notes
        run: |
          PLUGINS='${{ needs.detect-changes.outputs.plugins }}'

          # 生成发布说明
          echo "## 🚀 Official Plugins Release $(date +'%Y-%m-%d')" > release-notes.md
          echo "" >> release-notes.md
          echo "### 📦 Updated Plugins" >> release-notes.md
          echo "" >> release-notes.md

          for plugin in $(echo $PLUGINS | jq -r '.[]'); do
            if [[ -d "$plugin" ]]; then
              PLUGIN_NAME=$(node -p "require('./$plugin/package.json').name" 2>/dev/null || echo "$plugin")
              PLUGIN_VERSION=$(node -p "require('./$plugin/package.json').version" 2>/dev/null || echo "unknown")
              PLUGIN_DESC=$(node -p "require('./$plugin/package.json').description" 2>/dev/null || echo "")
              
              echo "#### $PLUGIN_NAME v$PLUGIN_VERSION" >> release-notes.md
              echo "$PLUGIN_DESC" >> release-notes.md
              echo "" >> release-notes.md
            fi
          done

          echo "### 📥 Installation" >> release-notes.md
          echo "" >> release-notes.md
          echo "官方插件可通过以下方式安装：" >> release-notes.md
          echo "" >> release-notes.md
          echo "1. **自动安装**：在 ChoiceForm Automation 插件市场中搜索并安装" >> release-notes.md
          echo "2. **手动安装**：下载 .choiceformpkg 文件并导入" >> release-notes.md
          echo "3. **SDK 安装**：使用 \`@choiceform/automation-sdk\` 命令行工具" >> release-notes.md
          echo "" >> release-notes.md

          # 设置输出
          echo "RELEASE_TAG=v$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-notes.outputs.RELEASE_TAG }}
          name: Official Plugins Release ${{ steps.release-notes.outputs.RELEASE_TAG }}
          body_path: release-notes.md
          files: release-artifacts/**/*.choiceformpkg
          draft: false
          prerelease: false

  update-registry:
    name: Update Plugin Registry
    runs-on: ubuntu-latest
    needs: [detect-changes, build-plugins, create-release]
    if: needs.detect-changes.outputs.has_plugins == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Generate Plugin Registry
        run: |
          mkdir -p registry

          # 生成插件注册表
          echo "Generating plugin registry..."

          # 生成基础 JSON 结构
          CURRENT_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          cat > registry/registry.json << EOF
          {
            "version": "1.0.0",
            "generated": "$CURRENT_DATE",
            "repository": "automation-official-plugins",
            "plugins": {
              "extensions": [],
              "models": [],
              "tools": []
            }
          }
          EOF

          # 创建临时文件来构建完整的 JSON
          echo '{"version": "1.0.0","generated": "'$CURRENT_DATE'","repository": "automation-official-plugins","plugins": {"extensions": [],"models": [],"tools": []}}' > temp_registry.json

          # 扫描每个插件类型并动态构建 JSON
          for category in extensions models tools; do
            if [[ -d "$category" ]]; then
              for plugin_dir in $category/*/; do
                if [[ -f "$plugin_dir/package.json" ]]; then
                  echo "Processing $plugin_dir..."
                  
                  # 读取插件信息
                  PLUGIN_NAME=$(node -p "require('./$plugin_dir/package.json').name" 2>/dev/null || echo "")
                  PLUGIN_VERSION=$(node -p "require('./$plugin_dir/package.json').version" 2>/dev/null || echo "1.0.0")
                  PLUGIN_DESC=$(node -p "require('./$plugin_dir/package.json').description" 2>/dev/null || echo "")
                  PLUGIN_AUTHOR=$(node -p "require('./$plugin_dir/package.json').author" 2>/dev/null || echo "ChoiceForm")
                  
                  if [[ ! -z "$PLUGIN_NAME" ]]; then
                    # 创建安全的文件名（替换特殊字符）
                    SAFE_NAME=$(echo "$PLUGIN_NAME" | sed 's/[@\/]/-/g' | sed 's/^-//' | sed 's/-$//')
                    PACKAGE_NAME="${SAFE_NAME}-${PLUGIN_VERSION}.choiceformpkg"
                    
                    # 使用 jq 添加插件到对应分类
                    PLUGIN_ENTRY=$(cat << EOF
          {
            "name": "$PLUGIN_NAME",
            "version": "$PLUGIN_VERSION", 
            "description": "$PLUGIN_DESC",
            "author": "$PLUGIN_AUTHOR",
            "category": "$category",
            "download_url": "https://github.com/choice-form/automation-official-plugins/releases/latest/download/${PACKAGE_NAME}",
            "repository_url": "https://github.com/choice-form/automation-official-plugins/tree/main/$plugin_dir",
            "updated_at": "$CURRENT_DATE"
          }
          EOF
          )
                    # 使用 jq 将插件添加到对应分类
                    echo "$PLUGIN_ENTRY" | jq -c '.' > temp_plugin.json
                    cat temp_registry.json | jq ".plugins.$category += [$(cat temp_plugin.json)]" > temp_registry_new.json
                    mv temp_registry_new.json temp_registry.json
                    echo "Added $PLUGIN_NAME to $category registry"
                  fi
                fi
              done
            fi
          done

          # 美化 JSON 并保存
          cat temp_registry.json | jq '.' > registry/registry.json
          rm -f temp_registry.json temp_plugin.json

          # 生成 HTML 页面
          cat > registry/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>ChoiceForm Official Plugins Registry</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 1200px; margin: 0 auto; padding: 20px; }
              .plugin { border: 1px solid #ddd; margin: 10px 0; padding: 15px; border-radius: 5px; }
              .category { margin: 20px 0; }
              .category h2 { color: #333; border-bottom: 2px solid #007cba; padding-bottom: 5px; }
            </style>
          </head>
          <body>
            <h1>🔌 ChoiceForm Official Plugins</h1>
            <p>官方维护的高质量插件集合</p>
            
            <div class="category">
              <h2>🔧 Extensions (扩展插件)</h2>
              <p>轻量级 HTTP 端点功能</p>
            </div>
            
            <div class="category">
              <h2>🤖 Models (模型插件)</h2>
              <p>AI 模型集成</p>
            </div>
            
            <div class="category">  
              <h2>🛠️ Tools (工具插件)</h2>
              <p>第三方服务集成</p>
            </div>
            
            <hr>
            <p><small>Generated: $(date)</small></p>
          </body>
          </html>
          EOF

      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          enablement: true

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: registry/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Output Registry Info
        run: |
          echo "✅ Plugin Registry Generated Successfully!"
          echo "📁 Registry files created in registry/ directory"
          if [ -f registry/registry.json ]; then
            echo "📋 registry.json size: $(stat -c%s registry/registry.json 2>/dev/null || stat -f%z registry/registry.json) bytes"
          fi
          if [ -f registry/index.html ]; then
            echo "🌐 index.html size: $(stat -c%s registry/index.html 2>/dev/null || stat -f%z registry/index.html) bytes"
          fi
          echo "🔗 If GitHub Pages deployment failed, you can manually upload these files"
