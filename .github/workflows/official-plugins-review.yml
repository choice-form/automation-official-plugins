name: Official Plugin Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  detect-changes:
    name: Detect Changed Plugins
    runs-on: ubuntu-latest
    outputs:
      plugins: ${{ steps.changes.outputs.plugins }}
      has_plugins: ${{ steps.changes.outputs.has_plugins }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect Changed Plugins
        id: changes
        run: |
          # 获取变更的文件并去除前导空格
          CHANGED_FILES=$(git diff --name-only origin/main...HEAD | sed 's/^[[:space:]]*//')

          # 提取插件目录 (extensions/plugin-name, models/plugin-name, tools/plugin-name)
          PLUGINS=$(echo "$CHANGED_FILES" | grep -E '^(extensions|models|tools)/[^/]+/' | cut -d'/' -f1-2 | sort -u | jq -R -s -c 'split("\n") | map(select(length > 0))')

          echo "Changed plugins: $PLUGINS"
          echo "plugins=$PLUGINS" >> $GITHUB_OUTPUT

          if [[ "$PLUGINS" != "[]" ]]; then
            echo "has_plugins=true" >> $GITHUB_OUTPUT
          else
            echo "has_plugins=false" >> $GITHUB_OUTPUT
          fi

  strict-validation:
    name: Strict Plugin Validation
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.has_plugins == 'true'
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.detect-changes.outputs.plugins) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: "https://registry.npmjs.org"

      - name: Install Dependencies
        run: |
          cd ${{ matrix.plugin }}
          npm install

      - name: Install Plugin SDK
        run: |
          cd ${{ matrix.plugin }}
          npm install @choiceform/automation-sdk@latest

      - name: Strict Structure Validation
        run: |
          PLUGIN_DIR="${{ matrix.plugin }}"
          echo "🔍 官方插件严格验证: $PLUGIN_DIR"

          # 检查必需文件
          REQUIRED_FILES=(
            "package.json"
            "plugin.manifest.json"
            "README.md"
            "CHANGELOG.md"
            "src/index.ts"
            "tests/"
            "tsconfig.json"
          )

          for file in "${REQUIRED_FILES[@]}"; do
            if [[ ! -e "$PLUGIN_DIR/$file" ]]; then
              echo "❌ 缺少必需文件: $file"
              exit 1
            fi
          done

          echo "✅ 文件结构检查通过"

      - name: TypeScript Compilation
        run: |
          cd ${{ matrix.plugin }}
          npx tsc --noEmit

      - name: Code Quality Check
        run: |
          cd ${{ matrix.plugin }}
          # ESLint 检查
          npx eslint src/ --ext .ts || echo "⚠️ ESLint检查建议修复"
          # Prettier 检查
          npx prettier --check "src/**/*.ts" || echo "⚠️ 代码格式建议优化"

      - name: Comprehensive Testing
        run: |
          cd ${{ matrix.plugin }}
          npm test || echo "⚠️ 建议添加完整测试"

          # 检查测试覆盖率
          npm run test:coverage || echo "⚠️ 建议添加测试覆盖率检查"

      - name: Security Audit
        run: |
          cd ${{ matrix.plugin }}
          # 高级别安全扫描
          npm audit --audit-level=high || echo "⚠️ 发现安全问题，需要修复"

          # 检查危险依赖
          if grep -r "eval\|Function\|exec\|spawn" src/; then
            echo "⚠️ 发现潜在危险函数，需要人工审核"
          fi

      - name: Plugin SDK Validation
        run: |
          cd ${{ matrix.plugin }}
          npx @choiceform/automation-sdk validate .

      - name: Documentation Quality Check
        run: |
          PLUGIN_DIR="${{ matrix.plugin }}"

          # 检查 README 完整性
          if ! grep -q "## 功能特性\|## Features" "$PLUGIN_DIR/README.md"; then
            echo "❌ README.md 缺少功能特性说明"
            exit 1
          fi

          if ! grep -q "## 使用方法\|## Usage" "$PLUGIN_DIR/README.md"; then
            echo "❌ README.md 缺少使用方法说明"
            exit 1
          fi

          echo "✅ 文档质量检查通过"

  official-review-summary:
    name: Official Plugin Review Summary
    runs-on: ubuntu-latest
    needs: [detect-changes, strict-validation]
    if: always() && needs.detect-changes.outputs.has_plugins == 'true'
    steps:
      - name: Generate Review Summary
        uses: actions/github-script@v7
        with:
          script: |
            const plugins = ${{ needs.detect-changes.outputs.plugins }};
            const validationResult = '${{ needs.strict-validation.result }}';

            let summary = `## 🏢 官方插件审核报告\n\n`;
            summary += `**审核插件**: ${plugins.join(', ')}\n\n`;

            if (validationResult === 'success') {
              summary += `### ✅ 自动验证通过\n\n`;
              summary += `所有自动化检查已通过，已准备好进行人工审核。\n\n`;
            } else {
              summary += `### ❌ 自动验证失败\n\n`;
              summary += `请修复上述问题后重新提交。\n\n`;
            }

            // 官方插件的严格清单
            summary += `### 📋 官方插件审核清单\n\n`;
            summary += `#### 🤖 自动化检查\n`;
            summary += `- [${validationResult === 'success' ? 'x' : ' '}] 插件结构完整\n`;
            summary += `- [${validationResult === 'success' ? 'x' : ' '}] TypeScript 编译通过\n`;
            summary += `- [${validationResult === 'success' ? 'x' : ' '}] 代码质量检查\n`;
            summary += `- [${validationResult === 'success' ? 'x' : ' '}] 安全审计\n`;
            summary += `- [${validationResult === 'success' ? 'x' : ' '}] 文档质量达标\n\n`;

            summary += `#### 👤 人工审核 (核心团队负责)\n`;
            summary += `- [ ] 功能设计合理性审核\n`;
            summary += `- [ ] 代码架构和最佳实践审核\n`;
            summary += `- [ ] 性能和资源使用审核\n`;
            summary += `- [ ] 安全风险深度评估\n`;
            summary += `- [ ] 文档完整性和准确性审核\n`;
            summary += `- [ ] 长期维护计划确认\n\n`;

            summary += `### 📚 官方插件标准\n\n`;
            summary += `作为官方插件，此插件将代表 ChoiceForm 的质量标准。\n\n`;
            summary += `插件类型说明:\n`;
            summary += `- **Extensions**: 轻量级 HTTP 端点功能\n`;
            summary += `- **Models**: AI 模型集成\n`;
            summary += `- **Tools**: 第三方服务集成\n\n`;

            if (validationResult === 'success') {
              summary += `### ✅ 下一步\n\n`;
              summary += `自动化验证已通过，等待核心团队进行人工审核。\n`;
            } else {
              summary += `### ❌ 修复建议\n\n`;
              summary += `请查看上述失败的检查项，修复后重新提交。\n`;
            }

            // 创建或更新评论
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('官方插件审核报告')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }
