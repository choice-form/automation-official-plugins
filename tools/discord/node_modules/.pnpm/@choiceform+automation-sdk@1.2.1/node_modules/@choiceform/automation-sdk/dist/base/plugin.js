/**
 * 节点插件基类 - 专业的工作流开发框架
 *
 * 特性：
 * - 🚀 零依赖设计，完全兼容节点式工作流体系
 * - 🔧 完善的开发工具链
 * - 🎯 类型安全的 TypeScript 支持
 * - 📦 支持热重载和实时调试
 * - ✅ 严格的 nodes-config 兼容性
 * - 🔄 工作流级别的错误处理
 */
export class Plugin {
    definition;
    context;
    constructor(definition) {
        this.definition = definition;
    }
    /**
     * 获取插件定义信息
     */
    getDefinition() {
        return this.definition;
    }
    /**
     * 设置执行上下文
     */
    setContext(context) {
        this.context = context;
    }
    /**
     * 验证输入参数
     */
    validateInputs(inputs) {
        const errors = [];
        const warnings = [];
        // 验证必需参数
        if (this.definition.parameters) {
            for (const param of this.definition.parameters) {
                if (param.required && !(param.name in inputs)) {
                    errors.push({
                        field: param.name,
                        message: `参数 ${param.name} 是必需的`,
                        code: 'REQUIRED_PARAMETER_MISSING'
                    });
                }
                // 类型验证
                const value = inputs[param.name];
                if (value !== undefined && !this.validateParameterType(value, param.type)) {
                    errors.push({
                        field: param.name,
                        message: `参数 ${param.name} 类型不匹配，期望 ${param.type}`,
                        code: 'TYPE_MISMATCH'
                    });
                }
                // 范围验证
                if (typeof value === 'number' && param.min !== undefined && value < param.min) {
                    errors.push({
                        field: param.name,
                        message: `参数 ${param.name} 不能小于 ${param.min}`,
                        code: 'VALUE_OUT_OF_RANGE'
                    });
                }
                if (typeof value === 'number' && param.max !== undefined && value > param.max) {
                    errors.push({
                        field: param.name,
                        message: `参数 ${param.name} 不能大于 ${param.max}`,
                        code: 'VALUE_OUT_OF_RANGE'
                    });
                }
            }
        }
        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }
    /**
     * 健康检查
     */
    async healthCheck() {
        const checks = [];
        // 基础配置检查
        checks.push({
            name: 'configuration',
            status: this.definition ? 'pass' : 'fail',
            message: this.definition ? '配置有效' : '配置缺失'
        });
        // 上下文检查
        checks.push({
            name: 'context',
            status: this.context ? 'pass' : 'warn',
            message: this.context ? '上下文已设置' : '上下文未设置'
        });
        return {
            status: checks.every(c => c.status === 'pass') ? 'healthy' :
                checks.some(c => c.status === 'fail') ? 'unhealthy' : 'degraded',
            timestamp: Date.now(),
            checks
        };
    }
    /**
     * 记录日志
     */
    log(level, message) {
        if (this.context?.log) {
            this.context.log(level, message);
        }
        else {
            // 回退到控制台输出
            console[level](`[${this.definition.identity.name}] ${message}`);
        }
    }
    /**
     * 获取凭据
     */
    async getCredential(name) {
        return this.context?.getCredential(name);
    }
    /**
     * 存储数据
     */
    async storeData(key, value) {
        await this.context?.storeData(key, value);
    }
    /**
     * 检索数据
     */
    async retrieveData(key) {
        return await this.context?.retrieveData(key) || null;
    }
    /**
     * 创建成功结果
     */
    createSuccessResult(data, metadata) {
        return {
            success: true,
            data,
            metadata
        };
    }
    /**
     * 创建错误结果
     */
    createErrorResult(message, code, details) {
        return {
            success: false,
            error: {
                message,
                code,
                details
            }
        };
    }
    /**
     * 验证参数类型
     */
    validateParameterType(value, expectedType) {
        switch (expectedType) {
            case 'string':
                return typeof value === 'string';
            case 'number':
                return typeof value === 'number';
            case 'boolean':
                return typeof value === 'boolean';
            case 'array':
                return Array.isArray(value);
            case 'object':
                return typeof value === 'object' && value !== null && !Array.isArray(value);
            default:
                return true; // 未知类型，通过验证
        }
    }
}
/**
 * 动作插件基类
 */
export class Action extends Plugin {
}
/**
 * 转换器插件基类
 */
export class Transform extends Plugin {
    async execute(inputs) {
        try {
            const inputData = inputs.data;
            const transformedData = await this.transform(inputData);
            return this.createSuccessResult({
                data: transformedData
            });
        }
        catch (error) {
            return this.createErrorResult(error instanceof Error ? error.message : '转换失败', 'TRANSFORM_ERROR');
        }
    }
}
/**
 * 连接器插件基类
 */
export class Connector extends Plugin {
}
