import type { PluginManifest, PluginExecutionContext, ExecutionResult, BaseNodePort, PortConfig } from ".pnpm/@choiceform+automation-sdk@1.2.1/node_modules/@choiceform/automation-sdk/src/types";
/**
 * 插件基类 - 所有插件都应该继承此类
 */
export declare abstract class PluginBase {
    protected logger?: Console;
    constructor();
    abstract setup?(): Promise<void>;
    abstract teardown?(): Promise<void>;
    abstract execute(inputs: Record<string, unknown>, context: PluginExecutionContext): Promise<ExecutionResult>;
    /**
     * 获取插件清单
     */
    abstract getManifest(): PluginManifest;
    /**
     * 获取端口配置
     */
    abstract getPortConfig(): PortConfig;
    /**
     * 获取输入端口
     */
    getInputPorts(): BaseNodePort[];
    /**
     * 获取输出端口
     */
    getOutputPorts(): BaseNodePort[];
    /**
     * 验证输入数据
     */
    validateInputs(inputs: Record<string, unknown>): Promise<boolean>;
}
/**
 * Trigger 节点基类
 */
export declare abstract class TriggerNode extends PluginBase {
    constructor();
    abstract setup(): Promise<void>;
    abstract teardown(): Promise<void>;
    onTrigger?(callback: (data: Record<string, unknown>) => void): void;
}
/**
 * Action 节点基类
 */
export declare abstract class ActionNode extends PluginBase {
    constructor();
}
/**
 * Transform 节点基类
 */
export declare abstract class TransformNode extends PluginBase {
    constructor();
}
/**
 * Control 节点基类
 */
export declare abstract class ControlNode extends PluginBase {
    constructor();
}
/**
 * AI 节点基类
 */
export declare abstract class AINode extends PluginBase {
    constructor();
}
//# sourceMappingURL=index.d.ts.map