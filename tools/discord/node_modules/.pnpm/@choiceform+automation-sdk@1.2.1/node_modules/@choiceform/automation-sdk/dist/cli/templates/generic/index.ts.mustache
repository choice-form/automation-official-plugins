import { {{#pluginType}}{{.}}{{/pluginType}}{{^pluginType}}Plugin{{/pluginType}}, ExecutionContext, ExecutionResult, PluginValue } from '{{{sdkPackageName}}}';

/**
 * {{description}}
 */
export class {{classNamePrefix}}{{#pluginType}}{{.}}{{/pluginType}}{{^pluginType}}Plugin{{/pluginType}} extends {{#pluginType}}{{.}}{{/pluginType}}{{^pluginType}}Plugin{{/pluginType}} {
  
  async execute(inputs: Record<string, PluginValue>, context: ExecutionContext): Promise<ExecutionResult> {
    try {
      // TODO: 实现你的{{pluginType}}逻辑
      console.log('{{projectName}} 插件执行中...', inputs);
      
      // 示例处理逻辑
      const result = {
        message: '{{pluginType}} 执行成功!',
        timestamp: new Date().toISOString(),
        inputData: inputs,
        nodeId: context.nodeId || 'unknown'
      };
      
      return { 
        success: true, 
        data: result 
      };
      
    } catch (error) {
      console.error('{{projectName}} 插件执行失败:', error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '未知错误' 
      };
    }
  }
  
  {{#hasHealth}}
  /**
   * 健康检查
   */
  async healthCheck(): Promise<{ healthy: boolean; message?: string }> {
    try {
      // TODO: 实现健康检查逻辑
      return { healthy: true, message: '{{projectName}} 运行正常' };
    } catch (error) {
      return { healthy: false, message: '健康检查失败' };
    }
  }
  {{/hasHealth}}
  
  {{#hasDebug}}
  /**
   * 调试信息
   */
  getDebugInfo(): Record<string, any> {
    return {
      pluginName: '{{projectName}}',
      pluginType: '{{pluginType}}',
      version: '1.0.0',
      features: [{{#features}}'{{.}}'{{^last}}, {{/last}}{{/features}}]
    };
  }
  {{/hasDebug}}
} 