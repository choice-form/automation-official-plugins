import { WebhookTrigger } from './index.js';
import { ParameterType } from '{{{sdkPackageName}}}';
import type { CoreNodeRegistration } from '{{{sdkPackageName}}}';

/**
 * WebhookTrigger 节点注册配置
 * 严格按照 nodes-config 标准配置所有字段
 */
export const webhookTriggerRegistration: CoreNodeRegistration = {
  id: 'custom.{{safeProjectName}}_trigger',
  name: 'WebhookTrigger',
  category: 'trigger',
  version: '1.0.0',
  builtIn: false,

  // 节点定义 - 包含所有 nodes-config 配置
  definition: {
    identity: {
      name: '{{safeProjectName}}_trigger',
      category: 'triggers',
      label: {
        'en_US': 'WebhookTrigger',
        'zh_Hans': 'Webhook 触发器'
      }
    },

    description: {
      ai: 'HTTP Webhook 触发器 - 兼容工作流自动化系统',
      human: {
        'en_US': 'Triggers workflow when webhook receives HTTP requests',
        'zh_Hans': '当 Webhook 接收到 HTTP 请求时触发工作流'
      }
    },

    // 触发器通常没有输入
    inputs: [],

    // 输出端口 - 严格按照 nodes-config NodePort 格式
    outputs: [
      {
        id: 'output',
        type: 'output',
        label: 'Request Data',
        description: 'Complete HTTP request information',
        allowMultiple: true,
        required: false,
        role: 'trigger',
        position: 'right',
        dataType: 'object'
      }
    ],

    // 参数配置
    parameters: [
      {
        name: 'httpMethod',
        type: ParameterType.SELECT,
        required: false,
        label: { 'en_US': 'HTTP Method', 'zh_Hans': 'HTTP 方法' },
        description: { 'en_US': 'The HTTP method to listen for' },
        default: 'POST',
        options: ['DELETE', 'GET', 'HEAD', 'PATCH', 'POST', 'PUT']
      },
      {
        name: 'path',
        type: ParameterType.STRING,
        required: false,
        label: { 'en_US': 'Path', 'zh_Hans': '路径' },
        description: { 'en_US': 'The path for the webhook URL. Can include route parameters like /:variable' },
        default: '',
        placeholder: '/webhook'
      },
      {
        name: 'authentication',
        type: ParameterType.SELECT,
        required: false,
        label: { 'en_US': 'Authentication', 'zh_Hans': '认证方式' },
        description: { 'en_US': 'Authentication method for the webhook' },
        default: 'none',
        options: ['none', 'basicAuth', 'headerAuth', 'jwtAuth']
      },
      {
        name: 'respond',
        type: ParameterType.SELECT,
        required: false,
        label: { 'en_US': 'Respond', 'zh_Hans': '响应时机' },
        description: { 'en_US': 'When to send the response' },
        default: 'immediately',
        options: ['immediately', 'lastNode', 'responseNode']
      },
      {
        name: 'responseCode',
        type: ParameterType.NUMBER,
        required: false,
        label: { 'en_US': 'Response Code', 'zh_Hans': '响应状态码' },
        description: { 'en_US': 'HTTP response code to return upon successful execution' },
        default: 200,
        min: 200,
        max: 599
      }
    ],

    // 布局配置 - 严格按照 nodes-config LayoutConfig
    layout: {
      width: 160,
      minHeight: 80,
      showContent: true
    },

    // 工具栏配置 - 严格按照 nodes-config ToolbarConfig
    toolbar: {
      buttons: ['run', 'delete'],
      position: 'top',
      showContent: true
    },

    // 注册信息 - 严格按照 nodes-config NodeRegistryItem
    registry: {
      type: 'trigger.webhook',
      name: 'WebhookTrigger',
      description: 'HTTP Webhook 触发器 - 兼容工作流自动化系统',
      categoryId: 'trigger',
      subCategoryId: 'network',
      icon: 'icon-trigger-started-by-webhook',
      tags: ['webhook', 'http', 'api', 'custom'],
      complexity: 'intermediate',
      isPopular: false
    },

    // 端口样式配置 - 严格按照 nodes-config 格式
    portStyles: {
      output: {
        shape: 'circle',
        size: 'medium',
        color: 'var(--color-trigger-port)',
        label: 'Request Data'
      }
    }
  },

  // 节点实现类
  nodeClass: WebhookTrigger,

  // 元数据
  metadata: {
    author: '{{author}}',
    license: 'MIT',
    tags: ['webhook', 'trigger', 'http', 'api', 'custom'],
    documentation: 'See README.md for usage instructions',
    repository: 'https://github.com/{{author}}/{{projectName}}'
  }
}; 