import type { NodeDefinition, ExecutionContext, ExecutionResult, PluginValue, ValidationResult, HealthCheckResult } from '../types/index.js';
/**
 * 节点插件基类 - 专业的工作流开发框架
 *
 * 特性：
 * - 🚀 零依赖设计，完全兼容节点式工作流体系
 * - 🔧 完善的开发工具链
 * - 🎯 类型安全的 TypeScript 支持
 * - 📦 支持热重载和实时调试
 * - ✅ 严格的 nodes-config 兼容性
 * - 🔄 工作流级别的错误处理
 */
export declare abstract class Plugin {
    protected definition: NodeDefinition;
    protected context?: ExecutionContext;
    constructor(definition: NodeDefinition);
    /**
     * 获取插件定义信息
     */
    getDefinition(): NodeDefinition;
    /**
     * 设置执行上下文
     */
    setContext(context: ExecutionContext): void;
    /**
     * 核心执行方法 - 子类必须实现
     */
    abstract execute(inputs: Record<string, PluginValue>): Promise<ExecutionResult>;
    /**
     * 验证输入参数
     */
    validateInputs(inputs: Record<string, PluginValue>): ValidationResult;
    /**
     * 健康检查
     */
    healthCheck(): Promise<HealthCheckResult>;
    /**
     * 记录日志
     */
    protected log(level: 'info' | 'warn' | 'error', message: string): void;
    /**
     * 获取凭据
     */
    protected getCredential(name: string): Promise<string | undefined>;
    /**
     * 存储数据
     */
    protected storeData(key: string, value: PluginValue): Promise<void>;
    /**
     * 检索数据
     */
    protected retrieveData(key: string): Promise<PluginValue | null>;
    /**
     * 创建成功结果
     */
    protected createSuccessResult(data: Record<string, PluginValue>, metadata?: Record<string, PluginValue>): ExecutionResult;
    /**
     * 创建错误结果
     */
    protected createErrorResult(message: string, code?: string, details?: PluginValue): ExecutionResult;
    /**
     * 验证参数类型
     */
    private validateParameterType;
}
/**
 * 动作插件基类
 */
export declare abstract class Action extends Plugin {
    /**
     * 执行动作
     */
    abstract execute(inputs: Record<string, PluginValue>): Promise<ExecutionResult>;
}
/**
 * 转换器插件基类
 */
export declare abstract class Transform extends Plugin {
    /**
     * 转换数据
     */
    abstract transform(input: PluginValue): Promise<PluginValue>;
    execute(inputs: Record<string, PluginValue>): Promise<ExecutionResult>;
}
/**
 * 连接器插件基类
 */
export declare abstract class Connector extends Plugin {
    /**
     * 建立连接
     */
    abstract connect(): Promise<void>;
    /**
     * 断开连接
     */
    abstract disconnect(): Promise<void>;
    /**
     * 测试连接
     */
    abstract testConnection(): Promise<boolean>;
}
