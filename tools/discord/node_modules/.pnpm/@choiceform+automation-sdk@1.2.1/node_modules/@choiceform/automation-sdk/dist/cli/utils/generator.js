import fs from "fs-extra";
import path from "path";
import { generatePluginDirectoryName } from "../../utils";
/**
 * 处理模板文件（简单的字符串替换）
 */
export function processTemplate(content, context) {
    let result = content;
    for (const [key, value] of Object.entries(context)) {
        const placeholder = new RegExp(`{{${key}}}`, "g");
        result = result.replace(placeholder, value);
    }
    return result;
}
/**
 * 递归拷贝并处理模板目录
 */
export async function copyTemplateDirectory(templatePath, targetPath, context) {
    const files = await fs.readdir(templatePath);
    for (const file of files) {
        const filePath = path.join(templatePath, file);
        const targetFilePath = path.join(targetPath, file);
        const stat = await fs.stat(filePath);
        if (stat.isDirectory()) {
            await fs.ensureDir(targetFilePath);
            await copyTemplateDirectory(filePath, targetFilePath, context);
        }
        else {
            const content = await fs.readFile(filePath, "utf-8");
            const processedContent = processTemplate(content, context);
            await fs.writeFile(targetFilePath, processedContent);
        }
    }
}
/**
 * 生成项目名称的各种格式
 */
export function generateNameVariants(name) {
    const kebabName = name.toLowerCase().replace(/\s+/g, "-");
    const pascalName = name
        .replace(/(?:^|\s)(\w)/g, (_, letter) => letter.toUpperCase())
        .replace(/\s+/g, "");
    const camelName = pascalName.charAt(0).toLowerCase() + pascalName.slice(1);
    return {
        kebabName,
        pascalName,
        camelName,
    };
}
/**
 * 生成插件模板
 */
export async function generatePlugin(options) {
    const { name, author, description, template, outputDir = process.cwd(), } = options;
    const nameVariants = generateNameVariants(name);
    const pluginDirName = generatePluginDirectoryName(name, template);
    const targetPath = path.join(outputDir, pluginDirName);
    const templateContext = {
        name,
        author,
        description,
        ...nameVariants,
        createdAt: new Date().toISOString(),
    };
    // 确保目标目录存在
    await fs.ensureDir(targetPath);
    // 这里可以根据需要实现具体的模板生成逻辑
    console.log(`Generated plugin ${name} at ${targetPath}`);
}
//# sourceMappingURL=generator.js.map