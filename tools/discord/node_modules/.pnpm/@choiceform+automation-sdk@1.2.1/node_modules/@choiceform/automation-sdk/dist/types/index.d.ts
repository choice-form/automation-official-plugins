/**
 * Automation Plugin SDK Types
 *
 * 完全匹配 automation/packages/client/app/contents/nodes-config 的数据结构
 */
/**
 * 节点类别 - 与automation保持一致
 */
export type NodeCategory = "trigger" | "action" | "transform" | "control" | "ai" | "utility";
/**
 * 节点复杂度
 */
export type NodeComplexity = "beginner" | "intermediate" | "advanced";
/**
 * 端口位置
 */
export type PortPosition = "left" | "right" | "top" | "bottom";
/**
 * 端口角色类型 - 用于 AI 节点等复杂场景
 */
export type PortRole = "model" | "memory" | "tool" | "data" | "trigger" | "control" | "config";
/**
 * 基础端口定义 - 完全匹配automation格式
 */
export interface BaseNodePort {
    id: string;
    type: "input" | "output";
    label?: string;
    allowMultiple?: boolean;
    required?: boolean;
    dataType?: string;
    position?: PortPosition;
    role?: PortRole;
    description?: string;
    group?: string;
    order?: number;
    placeholder?: string;
    defaultValue?: unknown;
}
/**
 * 端口配置 - 匹配PORT_CONFIGS格式
 */
export interface PortConfig {
    ports: BaseNodePort[];
    styles?: Record<string, any>;
}
/**
 * 工具栏按钮类型 - 匹配automation格式
 */
export type NodeToolbarButton = "run" | "delete" | "activate" | "more";
/**
 * 工具栏位置
 */
export type ToolbarPosition = "top" | "bottom";
/**
 * 工具栏配置 - 匹配TOOLBAR_CONFIGS格式
 */
export interface ToolbarConfig {
    position: ToolbarPosition;
    buttons: readonly NodeToolbarButton[];
    showContent: boolean;
}
/**
 * 布局配置 - 匹配LAYOUT_CONFIGS格式
 */
export interface LayoutConfig {
    width: number;
    minHeight: number;
    showContent: boolean;
}
/**
 * 节点注册信息 - 匹配NODE_REGISTRY格式
 */
export interface NodeRegistryItem {
    type: string;
    name: string;
    description: string;
    categoryId: NodeCategory;
    subCategoryId?: string;
    icon: string;
    tags: string[];
    isPopular: boolean;
}
/**
 * Automation节点完整配置
 * 这是automation系统需要的完整配置格式
 */
export interface AutomationNodeConfigs {
    registry: NodeRegistryItem;
    ports: PortConfig;
    toolbar?: ToolbarConfig;
    layout?: LayoutConfig;
}
/**
 * 插件执行上下文
 */
export interface PluginExecutionContext {
    nodeId: string;
    workflowId: string;
    userId?: string;
    log: (level: "debug" | "info" | "warn" | "error", message: string, data?: unknown) => void;
}
/**
 * 插件执行结果
 */
export interface ExecutionResult {
    success: boolean;
    data?: unknown;
    error?: string;
}
/**
 * 插件清单文件
 */
export interface PluginManifest {
    name: string;
    version: string;
    description: string;
    author: string;
    nodeType: string;
    automationNodeType: string;
    displayName: string;
    category: string;
    domain: string;
    subCategory: string;
    icon: string;
    tags: string[];
    isPopular: boolean;
    sdkVersion: string;
    automationConfigs: AutomationNodeConfigs;
    metadata: {
        createdAt: string;
        updatedAt: string;
    };
}
/**
 * 插件注册表文件
 */
export interface PluginRegistry {
    name: string;
    version: string;
    author: string;
    submittedAt: string;
    category: string;
    domain: string;
    security: {
        level: string;
        permissions: string[];
        sandbox: boolean;
        description: string;
    };
    testing: {
        coverage: number;
        testFiles: string[];
        integrationTests: boolean;
        performanceTests: boolean;
    };
    compatibility: {
        sdkVersion: string;
        nodeVersion: string;
        platformVersion: string;
    };
}
/**
 * 创建插件的选项
 */
export interface CreatePluginOptions {
    name: string;
    author: string;
    description: string;
    template: string;
    domain: string;
    includeTests: boolean;
    strictMode: boolean;
    outputDir?: string;
}
/**
 * 插件模板配置
 */
export interface PluginTemplate {
    name: string;
    value: string;
    baseClass: string;
    category: NodeCategory;
    description: string;
}
//# sourceMappingURL=index.d.ts.map