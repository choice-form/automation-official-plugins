import inquirer from 'inquirer';
import chalk from 'chalk';
import ora from 'ora';
import fs from 'fs-extra';
import path from 'path';
import validateNpmName from 'validate-npm-package-name';
import { renderTemplate } from '../utils/template.js';
import { initGitRepo } from '../utils/git.js';
/**
 * 根据插件类型和特性选择合适的模板
 */
function getTemplateNameByType(pluginType, features) {
    // 智能模板选择逻辑
    if (pluginType === 'trigger') {
        if (features.includes('http')) {
            return 'webhook-trigger'; // 完整的 HTTP Webhook 触发器
        }
        return 'generic'; // 通用触发器模板
    }
    if (pluginType === 'action') {
        if (features.includes('http')) {
            return 'http-action'; // HTTP Action 模板 (暂未实现，使用通用)
        }
        return 'generic';
    }
    if (pluginType === 'transform') {
        return 'data-transform'; // 数据转换模板 (暂未实现，使用通用)
    }
    return 'generic'; // 通用后备模板
}
export async function initCommand(projectName, options = {}) {
    console.log(chalk.cyan('🚀 创建 Automation 节点插件 - 专业的工作流开发框架\n'));
    // 1. 项目名称处理
    let finalProjectName = projectName;
    if (!finalProjectName) {
        const { name } = await inquirer.prompt([
            {
                type: 'input',
                name: 'name',
                message: '项目名称:',
                default: 'my-awesome-plugin',
                validate: (input) => {
                    const validation = validateNpmName(input);
                    if (!validation.validForNewPackages) {
                        return validation.errors?.[0] || '无效的项目名称';
                    }
                    return true;
                }
            }
        ]);
        finalProjectName = name;
    }
    // 2. 插件类型选择 (参考工作流引擎的节点分类体系)
    const { pluginType, features, advanced } = await inquirer.prompt([
        {
            type: 'list',
            name: 'pluginType',
            message: '选择插件类型 (基于节点式工作流体系):',
            choices: [
                {
                    name: '🔔 Trigger - 触发器节点 (启动工作流，如 Webhook、定时器、文件监听)',
                    value: 'trigger'
                },
                {
                    name: '⚡ Action - 动作节点 (执行操作，如 HTTP请求、邮件发送、数据库操作)',
                    value: 'action'
                },
                {
                    name: '🔄 Transform - 转换节点 (数据处理，如代码执行、数据格式化、条件判断)',
                    value: 'transform'
                },
                {
                    name: '🔧 Utility - 工具节点 (流程控制，如分支、合并、循环、延迟)',
                    value: 'utility'
                },
                {
                    name: '📦 Package - 节点包 (多个相关节点的组合包)',
                    value: 'package'
                }
            ]
        },
        {
            type: 'checkbox',
            name: 'features',
            message: '选择功能特性 (专业工作流特性):',
            choices: [
                { name: '📊 数据持久化 (本地存储，状态管理)', value: 'persistence' },
                { name: '🌐 HTTP 集成 (REST API、Webhook 支持)', value: 'http' },
                { name: '🔒 凭据管理 (API密钥、OAuth令牌)', value: 'credentials' },
                { name: '🎨 自定义界面 (参数配置、状态显示)', value: 'ui' },
                { name: '📝 动态参数 (表达式支持、变量绑定)', value: 'parameters' },
                { name: '🔄 实时监听 (文件变化、数据库事件)', value: 'events' },
                { name: '🌡️ 健康检查 (连接测试、状态监控)', value: 'health' },
                { name: '🔍 调试模式 (日志输出、错误跟踪)', value: 'debug' }
            ],
            default: []
        },
        {
            type: 'confirm',
            name: 'advanced',
            message: '启用高级开发特性? (热重载、类型安全、错误处理)',
            default: true
        }
    ]);
    // 3. 项目配置
    const projectPath = path.join(options.dir || '.', finalProjectName);
    if (await fs.pathExists(projectPath)) {
        console.log(chalk.red(`❌ 目录 ${projectPath} 已存在`));
        process.exit(1);
    }
    const spinner = ora('创建业内领先的插件项目...').start();
    try {
        // 4. 创建项目目录
        await fs.ensureDir(projectPath);
        // 5. 生成项目文件 (使用模板系统)
        const templateData = {
            projectName: finalProjectName,
            pluginType,
            features,
            advanced,
            typescript: options.typescript !== false, // 默认启用 TypeScript
            author: process.env.USER || 'Developer',
            date: new Date().toISOString(),
            description: `A ${pluginType} node for Automation platform - Compatible with workflow automation system`
        };
        // 生成核心文件 (使用智能模板选择)
        const templateName = getTemplateNameByType(pluginType, features);
        await renderTemplate(templateName, projectPath, templateData);
        spinner.text = '项目创建完成...';
        spinner.succeed('项目文件创建完成');
        // 7. 初始化 Git 仓库
        if (options.git !== false) {
            const gitSpinner = ora('初始化 Git 仓库...').start();
            try {
                await initGitRepo(projectPath);
                gitSpinner.succeed('Git 仓库初始化完成');
            }
            catch (error) {
                gitSpinner.warn('Git 仓库初始化失败 (可能未安装 Git)');
            }
        }
        // 8. 成功提示
        console.log(chalk.green('\n✨ 专业节点插件项目创建成功!\n'));
        console.log(chalk.cyan('🚀 特性亮点:'));
        console.log(chalk.gray('  • 完全兼容节点式工作流体系'));
        console.log(chalk.gray('  • TypeScript 类型安全'));
        console.log(chalk.gray('  • 热重载开发体验'));
        console.log(chalk.gray('  • nodes-config 严格兼容'));
        console.log(chalk.gray('  • 工作流级别的错误处理'));
        console.log();
        console.log(chalk.cyan('下一步操作:'));
        console.log(chalk.gray(`  cd ${finalProjectName}`));
        console.log(chalk.gray('  pnpm install'));
        console.log(chalk.gray('  automation-plugin dev'));
        console.log();
        console.log(chalk.yellow('📖 更多信息请查看 README.md'));
    }
    catch (error) {
        spinner.fail('项目创建失败');
        console.error(chalk.red(error instanceof Error ? error.message : '未知错误'));
        process.exit(1);
    }
}
