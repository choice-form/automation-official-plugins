import { ExecutionContext, PluginValue, ExecutionResult } from '../types/index.js';
/**
 * 触发器事件类型
 */
export interface TriggerEvent {
    data: PluginValue;
    id: string;
    metadata?: Record<string, PluginValue>;
    timestamp: number;
    type: string;
}
/**
 * 触发器配置
 */
export interface TriggerConfig {
    enabled: boolean;
    settings: Record<string, PluginValue>;
}
/**
 * 触发器状态
 */
export declare enum TriggerStatus {
    ERROR = "error",
    RUNNING = "running",
    STARTING = "starting",
    STOPPED = "stopped",
    STOPPING = "stopping"
}
/**
 * 触发器基础抽象类
 * 所有触发器插件都应该继承此类
 *
 * 重构后的设计：
 * 1. 简化接口，去除复杂的继承层次
 * 2. 确保与 NodeImplementation 完全兼容
 * 3. 提供清晰的生命周期管理
 */
export declare abstract class Trigger {
    protected status: TriggerStatus;
    protected config: TriggerConfig;
    protected context?: ExecutionContext;
    /**
     * 🔧 重构：兼容 NodeImplementation 接口的初始化方法
     * @param context 执行上下文
     */
    initialize(context: ExecutionContext): Promise<void>;
    /**
     * 🔧 重构：专用的配置初始化方法
     * @param config 触发器配置
     * @param context 执行上下文
     */
    initializeWithConfig(config: TriggerConfig, context: ExecutionContext): Promise<void>;
    /**
     * 启动触发器
     */
    start(): Promise<void>;
    /**
     * 停止触发器
     */
    stop(): Promise<void>;
    /**
     * 更新配置
     * @param config 新配置
     */
    updateConfig(config: TriggerConfig): Promise<void>;
    /**
     * 获取当前状态
     */
    getStatus(): TriggerStatus;
    /**
     * 获取当前配置
     */
    getConfig(): TriggerConfig;
    /**
     * 触发事件
     * @param event 触发事件
     */
    protected triggerEvent(event: TriggerEvent): Promise<void>;
    /**
     * 子类需要实现的启动方法
     */
    protected abstract onStart(): Promise<void>;
    /**
     * 子类需要实现的停止方法
     */
    protected abstract onStop(): Promise<void>;
    /**
     * 子类需要实现的事件处理方法
     * @param event 触发事件
     */
    protected abstract onEvent(event: TriggerEvent): Promise<void>;
    /**
     * 验证配置
     * @param config 配置对象
     */
    protected validateConfig(_config: TriggerConfig): boolean;
    /**
     * 安全地记录日志
     */
    protected log(level: 'info' | 'warn' | 'error', message: string): void;
    /**
     * 安全地获取凭据
     */
    protected getCredential(name: string): Promise<string | undefined>;
    /**
     * 安全地存储数据
     */
    protected storeData(key: string, value: PluginValue): Promise<void>;
    /**
     * 安全地检索数据
     */
    protected retrieveData(key: string): Promise<PluginValue | null>;
    /**
     * 🔧 重构：确保 NodeImplementation 接口兼容性
     *
     * 实现 NodeImplementation 接口要求的 execute 方法
     * 对于触发器，这个方法主要用于：
     * 1. 初始化和启动触发器
     * 2. 手动触发测试
     * 3. 配置更新
     */
    execute(inputs: Record<string, PluginValue>, context: ExecutionContext): Promise<ExecutionResult>;
    /**
     * 🔧 重构：添加默认的手动触发方法
     * 子类可以重写此方法实现特定的手动触发逻辑
     */
    manualTrigger(): Promise<void>;
    /**
     * 🔧 重构：创建成功结果的辅助方法
     */
    protected createSuccessResult(data: Record<string, PluginValue>, metadata?: Record<string, PluginValue>): ExecutionResult;
    /**
     * 🔧 重构：创建错误结果的辅助方法
     */
    protected createErrorResult(message: string, code?: string, details?: PluginValue): ExecutionResult;
}
