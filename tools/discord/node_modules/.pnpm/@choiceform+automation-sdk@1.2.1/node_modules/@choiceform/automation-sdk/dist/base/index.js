/**
 * 插件基类 - 所有插件都应该继承此类
 */
export class PluginBase {
    constructor() {
        this.logger = console;
    }
    /**
     * 获取输入端口
     */
    getInputPorts() {
        return this.getPortConfig().ports.filter((port) => port.type === "input" && port.required !== false);
    }
    /**
     * 获取输出端口
     */
    getOutputPorts() {
        return this.getPortConfig().ports.filter((port) => port.type === "output");
    }
    /**
     * 验证输入数据
     */
    async validateInputs(inputs) {
        const requiredInputs = this.getInputPorts()
            .filter((port) => port.required === true)
            .map((port) => port.id);
        for (const requiredInput of requiredInputs) {
            if (!(requiredInput in inputs) || inputs[requiredInput] === undefined) {
                return false;
            }
        }
        return true;
    }
}
/**
 * Trigger 节点基类
 */
export class TriggerNode extends PluginBase {
    constructor() {
        super();
    }
}
/**
 * Action 节点基类
 */
export class ActionNode extends PluginBase {
    constructor() {
        super();
    }
}
/**
 * Transform 节点基类
 */
export class TransformNode extends PluginBase {
    constructor() {
        super();
    }
}
/**
 * Control 节点基类
 */
export class ControlNode extends PluginBase {
    constructor() {
        super();
    }
}
/**
 * AI 节点基类
 */
export class AINode extends PluginBase {
    constructor() {
        super();
    }
}
//# sourceMappingURL=index.js.map