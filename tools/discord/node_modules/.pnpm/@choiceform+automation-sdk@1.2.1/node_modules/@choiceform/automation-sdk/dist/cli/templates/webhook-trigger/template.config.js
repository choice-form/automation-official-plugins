/**
 * Webhook Trigger 模板配置
 */
export default {
  name: 'webhook-trigger',
  description: 'HTTP Webhook 触发器 - 兼容 n8n 风格的工作流自动化系统',
  complexity: 'intermediate',
  features: ['http', 'webhook', 'trigger', 'api'],
  dependencies: ['nanoid'],
  devDependencies: ['@types/node'],
  
  // 模板文件配置
  files: [
    {
      source: 'index.ts.mustache',
      target: 'index.ts',
      required: true
    },
    {
      source: 'registration.ts.mustache', 
      target: 'registration.ts',
      required: true
    },
    {
      source: 'types.ts.mustache',
      target: 'types/webhook.ts',
      required: false
    },
    {
      source: 'test.ts.mustache',
      target: 'tests/webhook-trigger.test.ts',
      required: false
    },
    {
      source: 'README.md.mustache',
      target: 'README.md',
      required: false
    }
  ],
  
  // 模板变量生成函数
  generateTemplateData: (projectName, context) => {
    console.log('🔧 [TEMPLATE] generateTemplateData called with:', { projectName, context: typeof context });
    
    // 生成合理的类名：统一使用 WebhookTrigger
    const className = 'WebhookTrigger';
    
    // 生成合理的注册名：使用 camelCase
    const registrationName = 'webhookTriggerRegistration';
    
    // 生成合理的配置接口名
    const configInterfaceName = 'WebhookTriggerConfig';
    const settingsInterfaceName = 'WebhookTriggerSettings';
    
    // 生成安全的项目名
    const safeProjectName = projectName
      .replace(/[^a-zA-Z0-9]/g, '') // 移除所有非字母数字字符
      .replace(/^[0-9]/, '_$&') // 如果以数字开头，添加下划线
      .toLowerCase();
    
    const result = {
      projectName: projectName,
      className: className,
      registrationName: registrationName,
      configInterfaceName: configInterfaceName,
      settingsInterfaceName: settingsInterfaceName,
      safeProjectName: safeProjectName,
      description: context.description || 'HTTP Webhook 触发器 - 兼容工作流自动化系统',
      author: context.author || 'developer',
      sdkPackageName: '@choiceform/automation-plugin-sdk'
    };
    
    console.log('🔧 [TEMPLATE] Generated data:', result);
    return result;
  }
}; 