import { ExecutionContext, ExecutionResult, PluginValue } from '../types/index.js';
/**
 * 节点插件基础抽象类
 * 所有节点插件都应该继承此类并实现 execute 方法
 */
export declare abstract class Node {
    /**
     * 节点执行方法
     * @param inputs 输入数据
     * @param context 执行上下文
     * @returns 执行结果
     */
    abstract execute(inputs: Record<string, PluginValue>, context: ExecutionContext): Promise<ExecutionResult>;
    /**
     * 验证输入数据
     * @param inputs 输入数据
     * @returns 验证结果
     */
    protected validateInputs(_inputs: Record<string, PluginValue>): boolean;
    /**
     * 创建成功结果
     * @param data 数据
     * @returns 执行结果
     */
    protected createSuccessResult(data?: Record<string, PluginValue>): ExecutionResult;
    /**
     * 创建错误结果
     * @param message 错误信息
     * @returns 执行结果
     */
    protected createErrorResult(message: string): ExecutionResult;
    /**
     * 安全地记录日志
     * @param context 执行上下文
     * @param level 日志级别
     * @param message 日志信息
     */
    protected log(context: ExecutionContext, level: 'info' | 'warn' | 'error', message: string): void;
    /**
     * 安全地获取凭据
     * @param context 执行上下文
     * @param name 凭据名称
     * @returns 凭据值
     */
    protected getCredential(context: ExecutionContext, name: string): Promise<string | undefined>;
    /**
     * 安全地存储数据
     * @param context 执行上下文
     * @param key 键名
     * @param value 值
     */
    protected storeData(context: ExecutionContext, key: string, value: PluginValue): Promise<void>;
    /**
     * 安全地检索数据
     * @param context 执行上下文
     * @param key 键名
     * @returns 存储的值
     */
    protected retrieveData(context: ExecutionContext, key: string): Promise<PluginValue | null>;
}
