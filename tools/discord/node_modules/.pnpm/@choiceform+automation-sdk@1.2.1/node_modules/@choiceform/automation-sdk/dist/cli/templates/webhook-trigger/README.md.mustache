# {{projectName}}

{{description}}

## 功能特性

- ✅ HTTP Webhook 触发器
- ✅ 多种 HTTP 方法支持 (GET, POST, PUT, DELETE, PATCH, HEAD)
- ✅ 自定义路径和认证方式
- ✅ 灵活的响应模式
- ✅ 完整的类型安全
- ✅ 企业级测试覆盖
- ✅ 热重载开发支持

## 快速开始

### 安装依赖

```bash
pnpm install
```

### 开发模式

```bash
automation-plugin dev
```

这将启动开发服务器，支持热重载和实时调试。

### 构建插件

```bash
automation-plugin build
```

### 运行测试

```bash
pnpm test
```

## Webhook 使用指南

### 基础配置

创建一个 webhook 触发器，监听 HTTP 请求：

```typescript
import { {{classNamePrefix}}Trigger } from './src/index.js';
import { TriggerConfig } from '{{{sdkPackageName}}}';

const config: TriggerConfig = {
  id: 'my-webhook',
  settings: {
    httpMethod: 'POST',           // HTTP 方法
    path: '/my-webhook',          // URL 路径
    authentication: 'none',       // 认证方式
    respond: 'immediately',       // 响应时机
    responseCode: 200,           // 响应状态码
    responseData: '',            // 响应数据
    options: {
      rawBody: false,            // 是否保留原始请求体
      ignoreBots: true           // 是否忽略机器人请求
    }
  }
};

const trigger = new {{classNamePrefix}}Trigger(config);
await trigger.start();
```

### HTTP 方法支持

- `GET` - 获取数据请求
- `POST` - 创建数据请求
- `PUT` - 更新数据请求  
- `DELETE` - 删除数据请求
- `PATCH` - 部分更新请求
- `HEAD` - 头部信息请求

### 认证方式

#### 无认证
```typescript
authentication: 'none'
```

#### 基础认证 (Basic Auth)
```typescript
authentication: 'basicAuth'
// 需要在请求头中包含: Authorization: Basic <base64(username:password)>
```

#### 头部认证 (Header Auth)
```typescript
authentication: 'headerAuth'
// 需要在请求头中包含自定义认证头
```

#### JWT 认证
```typescript
authentication: 'jwtAuth'
// 需要在请求头中包含: Authorization: Bearer <jwt-token>
```

### 响应模式

#### 立即响应
```typescript
respond: 'immediately'
// 收到请求后立即返回响应，不等待工作流完成
```

#### 最后节点响应
```typescript
respond: 'lastNode'
// 等待工作流执行完成后返回最后节点的结果
```

#### 响应节点处理
```typescript
respond: 'responseNode'
// 由专门的"响应节点"处理 HTTP 响应
```

## API 参考

### {{classNamePrefix}}Trigger 类

#### 方法

##### `start(): Promise<void>`
启动 webhook 触发器，开始监听 HTTP 请求。

##### `stop(): Promise<void>`
停止 webhook 触发器，释放资源。

##### `handleWebhookRequest(requestData: WebhookRequestData): Promise<WebhookResponse>`
处理收到的 webhook 请求。

**参数：**
- `requestData` - HTTP 请求数据

**返回：**
- `WebhookResponse` - 处理结果和响应数据

##### `getWebhookUrl(): string`
获取当前的 webhook URL。

##### `getWebhookInfo(): WebhookTriggerInfo`
获取 webhook 的配置信息。

##### `manualTrigger(): Promise<void>`
手动触发一次测试事件。

### 类型定义

#### WebhookRequestData
```typescript
interface WebhookRequestData {
  body: any;                          // 请求体数据
  headers: Record<string, string>;    // 请求头
  hostname: string;                   // 主机名
  ip?: string;                        // 客户端 IP
  method: string;                     // HTTP 方法
  params: Record<string, string>;     // URL 参数
  query: Record<string, any>;         // 查询参数
  url: string;                        // 完整 URL
}
```

#### WebhookResponse
```typescript
interface WebhookResponse {
  data: Record<string, any>;     // 事件数据
  responseBody?: any;            // 响应体
  statusCode: number;            // HTTP 状态码
  success: boolean;              // 是否成功
}
```

## 开发指南

### 项目结构

```
{{projectName}}/
├── src/
│   ├── index.ts              # 主要实现
│   ├── registration.ts       # 节点注册配置
│   └── types/
│       └── webhook.ts        # 类型定义
├── tests/
│   └── webhook-trigger.test.ts  # 单元测试
├── package.json
├── tsconfig.json
└── README.md
```

### 自定义开发

#### 扩展认证方式

```typescript
// 在 handleWebhookRequest 方法中添加自定义认证逻辑
async handleWebhookRequest(requestData: RequestData) {
  const config = this.getConfig();
  const settings = config.settings;
  
  // 自定义认证检查
  if (settings.authentication === 'custom') {
    const isValid = await this.validateCustomAuth(requestData.headers);
    if (!isValid) {
      return {
        success: false,
        statusCode: 401,
        data: { error: 'Unauthorized' }
      };
    }
  }
  
  // 继续处理请求...
}
```

#### 添加中间件

```typescript
// 添加请求预处理
protected async preprocessRequest(requestData: RequestData): Promise<RequestData> {
  // 请求数据预处理
  if (requestData.headers['content-encoding'] === 'gzip') {
    // 解压缩处理
  }
  
  return requestData;
}
```

### 调试技巧

#### 启用详细日志
```typescript
// 在开发模式下启用详细日志
this.log('debug', 'Request received', { 
  method: requestData.method,
  path: requestData.url,
  headers: requestData.headers 
});
```

#### 使用手动触发测试
```bash
# 在开发服务器运行时，可以手动触发测试
automation-plugin dev --test-trigger
```

## 部署指南

### 构建生产版本

```bash
pnpm run build
```

### 发布到 npm

```bash
npm publish
```

### 集成到工作流引擎

1. 将插件注册到节点注册表
2. 配置 HTTP 服务器路由
3. 设置认证和安全策略

## 故障排除

### 常见问题

#### Webhook URL 不可访问
- 检查防火墙设置
- 确认端口是否正确开放
- 验证 DNS 解析

#### 认证失败
- 检查认证配置是否正确
- 验证请求头格式
- 确认凭据有效性

#### 响应超时
- 检查工作流执行时间
- 调整响应模式设置
- 优化节点处理逻辑

### 日志分析

```bash
# 查看详细日志
automation-plugin dev --log-level debug
```

## 许可证

MIT License - 详见 LICENSE 文件

## 贡献指南

1. Fork 项目
2. 创建功能分支
3. 提交更改
4. 推送到分支
5. 创建 Pull Request

## 支持

如果遇到问题，请：

1. 查看文档和 FAQ
2. 搜索现有 Issues
3. 创建新的 Issue 描述问题
4. 提供复现步骤和环境信息

---

基于 [Automation Plugin SDK]({{{sdkPackageName}}}) 构建 | 作者：{{author}} 