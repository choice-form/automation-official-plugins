import chalk from 'chalk';
import ora from 'ora';
import express from 'express';
import { WebSocketServer } from 'ws';
import chokidar from 'chokidar';
import fs from 'fs-extra';
import path from 'path';
export async function devCommand(options = {}) {
    console.log(chalk.cyan('🔧 启动开发调试模式\n'));
    const port = parseInt(options.port || '3000');
    const host = options.host || 'localhost';
    // 检查是否在插件项目目录
    const manifestPath = path.join(process.cwd(), 'plugin.manifest.json');
    if (!await fs.pathExists(manifestPath)) {
        console.log(chalk.red('❌ 当前目录不是有效的插件项目'));
        console.log(chalk.yellow('💡 请在插件项目根目录运行此命令'));
        process.exit(1);
    }
    const spinner = ora('启动开发服务器...').start();
    try {
        // 1. 创建 Express 应用
        const app = express();
        app.use(express.json());
        app.use(express.static('dist'));
        // 2. 插件热重载 API
        app.post('/api/reload', async (req, res) => {
            try {
                // 重新加载插件配置
                const manifest = await fs.readJson(manifestPath);
                res.json({ success: true, manifest });
            }
            catch (error) {
                res.status(500).json({
                    success: false,
                    error: error instanceof Error ? error.message : '重载失败'
                });
            }
        });
        // 3. 插件状态 API
        app.get('/api/status', async (req, res) => {
            const manifest = await fs.readJson(manifestPath);
            res.json({
                status: 'running',
                plugin: manifest.name,
                version: manifest.version,
                uptime: process.uptime()
            });
        });
        // 4. 启动 HTTP 服务器
        const server = app.listen(port, host, () => {
            spinner.succeed('开发服务器启动成功');
            console.log(chalk.green(`🌐 服务器运行在: http://${host}:${port}`));
            console.log(chalk.yellow('🔄 热重载已启用'));
            console.log(chalk.gray('📝 修改文件将自动重新加载\n'));
        });
        // 5. 创建 WebSocket 服务器 (用于实时通信)
        const wss = new WebSocketServer({ server });
        wss.on('connection', (ws) => {
            console.log(chalk.blue('🔗 新的调试连接建立'));
            ws.on('close', () => {
                console.log(chalk.gray('🔌 调试连接关闭'));
            });
            // 发送初始状态
            ws.send(JSON.stringify({
                type: 'connected',
                message: '调试连接已建立'
            }));
        });
        // 6. 文件监听 (借鉴 Dify 的热重载)
        if (options.watch) {
            const watcher = chokidar.watch(['src/**/*', '*.json'], {
                ignoreInitial: true,
                ignored: ['node_modules/**', 'dist/**']
            });
            watcher.on('change', async (filePath) => {
                console.log(chalk.yellow(`📝 文件变更: ${filePath}`));
                // 广播变更到所有连接的客户端
                wss.clients.forEach((client) => {
                    if (client.readyState === 1) { // WebSocket.OPEN
                        client.send(JSON.stringify({
                            type: 'file-changed',
                            file: filePath,
                            timestamp: Date.now()
                        }));
                    }
                });
                // 如果是配置文件变更，验证配置
                if (filePath.endsWith('.json') || filePath.endsWith('.yaml')) {
                    try {
                        await validatePluginConfig();
                        console.log(chalk.green('✅ 配置验证通过'));
                    }
                    catch (error) {
                        console.log(chalk.red(`❌ 配置验证失败: ${error instanceof Error ? error.message : '未知错误'}`));
                    }
                }
            });
            // 优雅关闭
            process.on('SIGINT', () => {
                console.log(chalk.yellow('\n🛑 正在关闭开发服务器...'));
                watcher.close();
                server.close(() => {
                    console.log(chalk.green('✅ 开发服务器已关闭'));
                    process.exit(0);
                });
            });
        }
    }
    catch (error) {
        spinner.fail('开发服务器启动失败');
        console.error(chalk.red(error instanceof Error ? error.message : '未知错误'));
        process.exit(1);
    }
}
async function validatePluginConfig() {
    const manifestPath = path.join(process.cwd(), 'plugin.manifest.json');
    const manifest = await fs.readJson(manifestPath);
    // 基础验证
    if (!manifest.name || !manifest.version) {
        throw new Error('插件名称和版本不能为空');
    }
    // 更多验证逻辑...
}
