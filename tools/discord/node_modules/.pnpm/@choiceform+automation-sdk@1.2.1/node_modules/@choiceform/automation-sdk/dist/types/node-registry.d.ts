import { NodeDefinition, PluginValue, ExecutionContext, ExecutionResult, NodeCategory } from './index.js';
export interface NodeRegistration {
    builtIn: boolean;
    category: NodeCategory;
    conflicts?: string[];
    definition: NodeDefinition;
    dependencies?: string[];
    id: string;
    metadata: {
        author: string;
        documentation?: string;
        license: string;
        repository?: string;
        tags: string[];
    };
    name: string;
    nodeClass: new () => NodeImplementation;
    pluginId?: string;
    version: string;
}
export interface CoreNodeRegistration extends Omit<NodeRegistration, 'pluginId'> {
    builtIn: boolean;
}
export interface NodeImplementation {
    /**
     * 可选的清理方法
     */
    cleanup?(): Promise<void>;
    /**
     * 核心执行方法 - 所有节点都必须实现
     */
    execute(inputs: Record<string, PluginValue>, context: ExecutionContext): Promise<ExecutionResult>;
    /**
     * 可选的初始化方法
     */
    initialize?(context: ExecutionContext): Promise<void>;
}
export interface NodeRegistry {
    checkDependencies(nodeId: string): Promise<DependencyCheckResult>;
    createNodeInstance(nodeId: string): Promise<NodeImplementation>;
    getAllNodes(): NodeRegistration[];
    getNode(nodeId: string): NodeRegistration | undefined;
    getNodesByCategory(category: NodeCategory): NodeRegistration[];
    register(registration: NodeRegistration): Promise<void>;
    searchNodes(query: SearchQuery): NodeRegistration[];
    unregister(nodeId: string): Promise<void>;
}
export interface SearchQuery {
    author?: string;
    category?: NodeCategory;
    keyword?: string;
    tags?: string[];
}
export interface DependencyCheckResult {
    conflicts: string[];
    missing: string[];
    satisfied: boolean;
}
export interface NodeRegistryEvents {
    'node-registered': (registration: NodeRegistration) => void;
    'node-unregistered': (nodeId: string) => void;
    'node-updated': (registration: NodeRegistration) => void;
}
